toy_1 <- toy %>%
mutate(int = cut2(x, g = 4)) %>%
group_by(int)
head(toy_1)
toy_1 <- toy %>%
mutate(int = cut2(x, g = 4)) %>%
group_by(int) %>%
mutate(media = mean(y))
head(toy_1)
toy_1
ggplot(toy_1, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", aes(x, y = y, group = int), color = "red", se = FALSE)
install.packages("fda")
library(fda)
knots <- quantile(x)
knots
base <- create.bspline.basis(
norder = 4, # polinomios cúbicos
breaks = knots # nodos en los cuartiles de x
)
plot(base, lty = "solid")
H <- eval.basis(x, base)
head(H)
beta_hat <- as.vector(solve(t(H) %*% H) %*% t(H) %*% toy$y)
beta_hat
mu <- function(x, betas){
as.numeric(betas %*% t(eval.basis(x, base)))
}
ggplot(toy, aes(x = x, y = y)) +
geom_point(color = "red") +
stat_function(fun = mu, arg = list(betas = beta_hat), color = "blue") +
labs(title = "B-splines")
splinesBoot <- function(){
toy_boot <- sample_n(toy, size = n, replace = TRUE)
H <- eval.basis(toy_boot$x, base)
as.vector(solve(t(H) %*% H) %*% t(H) %*% toy_boot$y)
}
sims_splines <- rdply(2000, splinesBoot())
betas <- as.matrix(sims_splines[, -1]) # quitamos la columna de ínidices
head(betas)
length(betas)
nrow(betas)
splines_boot <- ggplot(toy, aes(x = x, y = y))
for(i in 1:100){
splines_boot <- splines_boot +
stat_function(fun = mu, arg = list(betas = betas[i, ]), alpha = 0.1)
}
splines_boot + geom_point(color = "red")
setwd("~/Dropbox/ITAM/Decimo_semestre/Estadistica_computacional/Final")
load("~/Dropbox/ITAM/Decimo_semestre/Estadistica_computacional/Final/datos_final.RData")
library(nullabor)
library(plyr)
library(ggplot2)
library(MCMCpack)
library(dplyr)
library(reshape2)
library(expm)
library(tidyr)
library(R2jags)
library(rjags)
library(gridExtra)
ggplot(as.data.frame(posterior), aes(x = posterior)) +
geom_histogram(aes(y = ..density..), binwidth = 2, fill = "gray") +
stat_function(fun = dinvgamma, args = list(shape = alpha1, scale = beta1),
color = "blue") +
geom_vline(xintercept = c(sigma2_bayes),
color = c("red"))
sigma2_bayes
es_bayes
ggplot(as.data.frame(sigmas), aes(x = sigmas)) +
geom_histogram(aes(y = ..density..), binwidth = 2, fill = "gray")  +
geom_vline(xintercept = c(sigma2_jags),
color = c("red"))
sigma2_jags
es_jags
siga2_b
sigma2_b
sigma2_bayes
sigma2_jags
es_b
es_bayes
shape0 <- 1
scale0 <- 1
# 1. simulamos valores porvenientes de una distribución gamma
x_gamma <- rgamma(100000, shape = shape0, rate = scale0)
# 2. invertimos los valores simulados
x_igamma <- 1 / x_gamma
x_igamma <- data.frame(x_igamma)
# grafica de la funcion de densidad de la gamma inversa
ggplot(x_igamma, aes(x = x_igamma)) +
geom_histogram(aes(y = ..density..), binwidth = .2, fill = "gray") +
stat_function(fun = dinvgamma, args = list(shape = shape0, scale = scale0),
color = "blue") +
scale_x_continuous(limits = c(0, 7))
# calculo de la distribucion posterior
alpha1 <- shape0 + n/2
beta1 <- scale0 + sum((x - 0)^2)/2
posterior <- rinvgamma(10000, alpha1, beta1)
# valor de sigma2 estimado por analisis bayesianos
sigma2_bayes<- mean(posterior)
sigma2_bayes
# histograma posterior
ggplot(as.data.frame(posterior), aes(x = posterior)) +
geom_histogram(aes(y = ..density..), binwidth = 2, fill = "gray") +
stat_function(fun = dinvgamma, args = list(shape = alpha1, scale = beta1),
color = "blue") +
geom_vline(xintercept = c(sigma2_bayes),
color = c("red"))
# error estandar
es_bayes <- sqrt(var(posterior))
es_bayes
es_jags
trial.table
ggplot(sims_lnsigma_boot, aes(x = V1)) +
geom_histogram(binwidth = 0.05, fill = "gray30") +
geom_vline(xintercept = c(li_per, ls_per, lnsigma_boot),
color = c("black", "black", "red"))
ggplot(sims_lnsigma_boot, aes(x = V1)) +
geom_histogram(binwidth = 0.08, fill = "gray30") +
geom_vline(xintercept = c(li_per, ls_per, lnsigma_boot),
color = c("black", "black", "red"))
# hisograma con intervalos de confianza
ggplot(sims_lnsigma_boot, aes(x = V1)) +
geom_histogram(binwidth = 0.02, fill = "gray30") +
geom_vline(xintercept = c(li_per, ls_per, lnsigma_boot),
color = c("black", "black", "red"))
ggplot(sims_lnsigma_boot, aes(x = V1)) +
geom_histogram(binwidth = 0.02, alpha=.3,fill = "gray30") +
geom_vline(xintercept = c(li_per, ls_per, lnsigma_boot),
color = c("black", "black", "red"))
ggplot(sims_lnsigma_boot, aes(x = V1)) +
geom_histogram(binwidth = 0.02, alpha=.5,fill = "gray30") +
geom_vline(xintercept = c(li_per, ls_per, lnsigma_boot),
color = c("black", "black", "red"))
ggplot(sims_lnsigma_boot, aes(x = V1)) +
geom_histogram(binwidth = 0.02, alpha=.6,fill = "gray30") +
geom_vline(xintercept = c(li_per, ls_per, lnsigma_boot),
color = c("black", "black", "red"))
ggplot(sims_lnsigma_boot, aes(x = V1)) +
geom_histogram(binwidth = 0.02, alpha=1,fill = "gray30") +
geom_vline(xintercept = c(li_per, ls_per, lnsigma_boot),
color = c("black", "black", "red"))
ggplot(sims_lnsigma_boot, aes(x = V1)) +
geom_histogram(binwidth = 0.02, alpha=.1,fill = "gray30") +
geom_vline(xintercept = c(li_per, ls_per, lnsigma_boot),
color = c("black", "black", "red"))
ggplot(sims_lnsigma_boot, aes(x = V1)) +
geom_histogram(binwidth = 0.02, alpha=.7,fill = "gray30") +
geom_vline(xintercept = c(li_per, ls_per, lnsigma_boot),
color = c("black", "black", "red"))
ls_per <- round(quantile(sims_lnsigma_boot$V1, prob = 0.975), 2)
li_per <- round(quantile(sims_lnsigma_boot$V1, prob = 0.025), 2)
ls_per
li_per
# estimador de max verosimilitud es
lnsigma <- log(sqrt(1 / n * sum((x - 0) ^ 2)))
# utilizamos bootstrap parametrico
lnsigmaBoot <- function(){
# Simular X_1*,...X_N* con distribución N(mu_hat, sigma_hat^2)
x_boot <- rnorm(n, mean = 0, sd = sqrt(sigma2))
# Calcular mu*, sigma* y theta*
lnsigma_boot <- log(sqrt(1 / n * sum((x_boot - 0) ^ 2)))
lnsigma_boot
}
# Paso 4: Repetimos B = 3000 veces estimamos el error estándar
sims_lnsigma_boot <- rdply(3000, lnsigmaBoot())
lnsigma_boot <- mean(sims_lnsigma_boot$V1)
lnsigma_boot
# histograma de las replicaciones bootstrap
ggplot(sims_lnsigma_boot,aes(x=V1))+
geom_histogram(binwidth = .05)
# como los cuantiles de la distribucion de la estimacion de lnsigma son muy parecidos
# a los cuantiles de una normal, usaremos los cuantiles del histograma bootstrap para
# definir los intervalos de confianza
round(quantile(sims_lnsigma_boot$V1, probs = c(0.025, 0.05, 0.1, 0.9, 0.95, 0.975)), 2)
round(qnorm(p = c(0.025, 0.05, 0.1, 0.9, 0.95, 0.975), mean = lnsigma,
sd = sd(sims_lnsigma_boot$V1)), 2)
# intervalo de confianza por percentiles
ls_per <- round(quantile(sims_lnsigma_boot$V1, prob = 0.975), 2)
li_per <- round(quantile(sims_lnsigma_boot$V1, prob = 0.025), 2)
# hisograma con intervalos de confianza
ggplot(sims_lnsigma_boot, aes(x = V1)) +
geom_histogram(binwidth = 0.02, alpha=.7,fill = "gray30") +
geom_vline(xintercept = c(li_per, ls_per, lnsigma_boot),
color = c("black", "black", "red"))
ls_per <- round(quantile(sims_lnsigma_boot$V1, prob = 0.975), 2)
li_per <- round(quantile(sims_lnsigma_boot$V1, prob = 0.025), 2)
ls_per
li_per
N <- n
modelo_normal_tau.txt <-
'
model{
for(i in 1:N){
x[i] ~ dnorm(0, nu)
}
# iniciales
nu <- 1/sigma2
sigma2 ~ dunif(0.1, 300)
tau <- log(sqrt(sigma2))
}
'
cat(modelo_normal_tau.txt, file = 'modelo_normal_tau.bugs')
# valores iniciales para los parámetros, si no se especifican la función jags
# generará valores iniciales
#jags.inits <- function(){
#  list("nu" = runif(1, 0.1, 300))
#}
jags_fit_tau <- jags(
model.file = "modelo_normal_tau.bugs",    # modelo de JAGS
#inits = jags.inits,   # valores iniciales
data = list(x = x, N = N),    # lista con los datos
parameters.to.save = c("nu", "sigma2", "tau"),  # parámetros por guardar
n.chains = 3,   # número de cadenas
n.iter = 10000,    # número de pasos
n.burnin = 1000,   # calentamiento de la cadena
n.thin = 1
)
jags_fit_tau
# podemos ver las cadenas
traceplot(jags_fit_tau, varname = c("nu", "sigma2"))
lnsigmas_jags <- (jags_fit_tau$BUGSoutput$sims.matrix[, 4])
lnsigma_jags <- mean(lnsigmas_jags)
lnsigma_jags
# intervalo de confianza por percentiles
ls_per_jags <- round(quantile(lnsigmas_jags, prob = 0.975), 2)
li_per_jags <- round(quantile(lnsigmas_jags, prob = 0.025), 2)
# histograma posterior
ggplot(as.data.frame(lnsigmas_jags), aes(x = lnsigmas_jags)) +
geom_histogram(aes(y = ..density..), binwidth = .01, fill = "gray")  +
geom_vline(xintercept = c(li_per_jags, ls_per_jags, lnsigma_jags),
color = c("black", "black", "red"))
ls_per_jags <- round(quantile(lnsigmas_jags, prob = 0.975), 2)
li_per_jags <- round(quantile(lnsigmas_jags, prob = 0.025), 2)
li_per_jags
ls_per_jags
ggplot(as.data.frame(lnsigmas_jags), aes(x = lnsigmas_jags)) +
geom_histogram(aes(y = ..density..), binwidth = .01, fill = "gray")  +
geom_vline(xintercept = c(li_per_jags, ls_per_jags, lnsigma_jags),
color = c("black", "black", "red"))
caminata <- data.frame(pasos = 1:pasos, theta = camino_A)
ggplot(caminata[1:2000, ], aes(x = pasos, y = theta)) +
geom_point(size = 0.8) +
geom_path(alpha = 0.5) +
scale_y_continuous(expression(theta), limits = c(0, 1)) +
scale_x_continuous("Tiempo")
prior <- function(mu, tau){
function(theta) {
1/sqrt(2*pi*tau^2)*exp(-1/(2*tau^2)*((theta-mu)^2))
}
}
mi_prior<-prior(150,15)
likeNorm <- function(S, S2, N){
function(theta){
(1/(800*pi))^(N/2)*exp(-(1/800)*(S2-2*theta*S+N*(theta^2)))
}
}
mi_like<-likeNorm(13000,1700000,100)
postRelProb <- function(theta){
mi_like(theta) * mi_prior(theta)
}
### a) rechazados para N(0,0.2)
#Metrópolis
set.seed(114041)
# para cada paso decidimos el movimiento de acuerdo a la siguiente función
caminaAleat <- function(theta){ # theta: valor actual
salto_prop <- rnorm(1, 0, sd = sqrt(0.2)) # salto propuesto
theta_prop <- theta + salto_prop # theta propuesta
#if(theta_prop < 0 | theta_prop > 1){ # si el salto implica salir del dominio
#  return(theta)
#}
u <- runif(1)
p_move = min(postRelProb(theta_prop) / postRelProb(theta), 1) # prob mover
if(p_move  > u){
return(theta_prop) # aceptar valor propuesto
}
else{
return(theta) # rechazar
}
}
pasos <- 6000
camino_A <- numeric(pasos) # vector que guardará las simulaciones
camino_A[1] <- 150 # valor inicial
rechazo = 0
# Generamos la caminata aleatoria
for (j in 2:pasos){
camino_A[j] <- caminaAleat(camino_A[j-1])
rechazo <- rechazo + 1 * (camino_A[j] == camino_A[j - 1])
}
head(camino_A)
caminata <- data.frame(pasos = 1:pasos, theta = camino_A)
head(caminata)
ggplot(caminata[1:2000, ], aes(x = pasos, y = theta)) +
geom_point(size = 0.8) +
geom_path(alpha = 0.5) +
scale_y_continuous(expression(theta), limits = c(0, 1)) +
scale_x_continuous("Tiempo")
caminata[1:2000, ]
caminata
head(caminata)
head(caminata[1:2000,])
caminata <- data.frame(pasos = 1:pasos, theta = camino_A)
ggplot(caminata[1:2000, ], aes(x = pasos, y = theta)) +
geom_point() +
geom_path(alpha = 0.5) +
scale_y_continuous(expression(theta), limits = c(0, 1)) +
scale_x_continuous("Tiempo")
ggplot(caminata[1:2000, ], aes(x = pasos, y = theta)) +
geom_point(size = 0.8) +
geom_path(alpha = 0.5) +
scale_y_continuous(expression(theta), limits = c(120, 160)) +
scale_x_continuous("Tiempo")
mean(caminata$theta)
ggplot(caminata[1:2000, ], aes(x = pasos, y = theta)) +
geom_point(size = 0.8) +
geom_path(alpha = 0.5) +
scale_y_continuous(expression(theta), limits = c(120, 160)) +
scale_x_continuous("Tiempo") +
geom_vline(xintercept = 131.0863, color = "red", alpha = 0.5)
ggplot(caminata[1:2000, ], aes(x = pasos, y = theta)) +
geom_point(size = 0.8) +
geom_path(alpha = 0.5) +
scale_y_continuous(expression(theta), limits = c(120, 160)) +
scale_x_continuous("Tiempo") +
geom_hline(xintercept = 131.0863, color = "red", alpha = 0.5)
ggplot(caminata[1:2000, ], aes(x = pasos, y = theta)) +
geom_point(size = 0.8) +
geom_path(alpha = 0.5) +
scale_y_continuous(expression(theta), limits = c(120, 160)) +
scale_x_continuous("Tiempo") +
geom_hline(yintercept = 131.0863, color = "red", alpha = 0.5)
ggplot(caminata[1:2000, ], aes(x = pasos, y = theta)) +
geom_point(size = 0.8) +
geom_path(alpha = 0.5) +
scale_y_continuous(expression(theta), limits = c(120, 160)) +
scale_x_continuous("Tiempo") +
geom_hline(yintercept = mean(theta), color = "red", alpha = 0.5)
meda<- mean(caminta$theta)
caminata <- data.frame(pasos = 1:pasos, theta = camino_A)
meda<- mean(caminta$theta)
ggplot(caminata[1:2000, ], aes(x = pasos, y = theta)) +
geom_point(size = 0.8) +
geom_path(alpha = 0.5) +
scale_y_continuous(expression(theta), limits = c(120, 160)) +
scale_x_continuous("Tiempo") +
geom_hline(yintercept = mean(caminata$theta), color = "red", alpha = 0.5)
pasosN02 <- ggplot(caminata[1:2000, ], aes(x = pasos, y = theta)) +
geom_point(size = 0.8) +
geom_path(alpha = 0.5) +
scale_y_continuous(expression(theta), limits = c(120, 160)) +
scale_x_continuous("Tiempo") +
geom_hline(yintercept = mean(caminata$theta), color = "red", alpha = 0.5)
caminata <- data.frame(pasos = 1:pasos, theta = camino_B)
pasosN05 <- ggplot(caminata[1:2000, ], aes(x = pasos, y = theta)) +
geom_point(size = 0.8) +
geom_path(alpha = 0.5) +
scale_y_continuous(expression(theta), limits = c(120, 160)) +
scale_x_continuous("Tiempo") +
geom_hline(yintercept = mean(caminata$theta), color = "red", alpha = 0.5)
set.seed(114041)
# para cada paso decidimos el movimiento de acuerdo a la siguiente función
caminaAleat <- function(theta){ # theta: valor actual
salto_prop <- rnorm(1, 0, sd = sqrt(5)) # salto propuesto
theta_prop <- theta + salto_prop # theta propuesta
#if(theta_prop < 0 | theta_prop > 1){ # si el salto implica salir del dominio
#  return(theta)
#}
u <- runif(1)
p_move = min(postRelProb(theta_prop) / postRelProb(theta), 1) # prob mover
if(p_move  > u){
return(theta_prop) # aceptar valor propuesto
}
else{
return(theta) # rechazar
}
}
pasos <- 6000
camino_B <- numeric(pasos) # vector que guardará las simulaciones
camino_B[1] <- 150 # valor inicial
rechazo = 0
# Generamos la caminata aleatoria
for (j in 2:pasos){
camino_B[j] <- caminaAleat(camino_B[j-1])
rechazo <- rechazo + 1 * (camino_B[j] == camino_B[j - 1])
}
caminata <- data.frame(pasos = 1:pasos, theta = camino_B)
pasosN05 <- ggplot(caminata[1:2000, ], aes(x = pasos, y = theta)) +
geom_point(size = 0.8) +
geom_path(alpha = 0.5) +
scale_y_continuous(expression(theta), limits = c(120, 160)) +
scale_x_continuous("Tiempo") +
geom_hline(yintercept = mean(caminata$theta), color = "red", alpha = 0.5)
pasosN05
caminata <- data.frame(pasos = 1:pasos, theta = camino_C)
pasosN020 <- ggplot(caminata[1:2000, ], aes(x = pasos, y = theta)) +
geom_point(size = 0.8) +
geom_path(alpha = 0.5) +
scale_y_continuous(expression(theta), limits = c(120, 160)) +
scale_x_continuous("Tiempo") +
geom_hline(yintercept = mean(caminata$theta), color = "red", alpha = 0.5)
pasosN020
set.seed(114041)
# para cada paso decidimos el movimiento de acuerdo a la siguiente función
caminaAleat <- function(theta){ # theta: valor actual
salto_prop <- rnorm(1, 0, sd = sqrt(20)) # salto propuesto
theta_prop <- theta + salto_prop # theta propuesta
#if(theta_prop < 0 | theta_prop > 1){ # si el salto implica salir del dominio
#  return(theta)
#}
u <- runif(1)
p_move = min(postRelProb(theta_prop) / postRelProb(theta), 1) # prob mover
if(p_move  > u){
return(theta_prop) # aceptar valor propuesto
}
else{
return(theta) # rechazar
}
}
pasos <- 6000
camino_C <- numeric(pasos) # vector que guardará las simulaciones
camino_C[1] <- 150 # valor inicial
rechazo = 0
# Generamos la caminata aleatoria
for (j in 2:pasos){
camino_C[j] <- caminaAleat(camino_C[j-1])
rechazo <- rechazo + 1 * (camino_C[j] == camino_C[j - 1])
}
caminata <- data.frame(pasos = 1:pasos, theta = camino_C)
pasosN020 <- ggplot(caminata[1:2000, ], aes(x = pasos, y = theta)) +
geom_point(size = 0.8) +
geom_path(alpha = 0.5) +
scale_y_continuous(expression(theta), limits = c(120, 160)) +
scale_x_continuous("Tiempo") +
geom_hline(yintercept = mean(caminata$theta), color = "red", alpha = 0.5)
pasosN020
rechazo / pasos
grafica_A
grafica_B
grafica_C
grid.arrange(grafica_A, grafica_B, grafica_C, ncol = 3)
grid.arrange(pasosN02, pasosN05, pasosN020, ncol = 3)
grid.arrange(grafica_A, grafica_B, grafica_C, ncol = 1)
grid.arrange(pasosN02, pasosN05, pasosN020, ncol = 1)
hist_A <- ggplot(filter(caminata_A, pasos > 1000), aes(x = theta)) +
geom_histogram(aes(y = ..density..),binwidth=1,alpha=.5)
hist_A
hist_A <- ggplot(filter(caminata_A, pasos > 1000), aes(x = theta)) +
geom_histogram(aes(y = ..density..),binwidth=1,alpha=.6)
hist_A
hist_A <- ggplot(filter(caminata_A, pasos > 1000), aes(x = theta)) +
geom_histogram(aes(y = ..density..),binwidth=1,alpha=.4)
hist_A
grid.arrange(hist_A, hist_B, hist_C, ncol = 3)
hist_A <- ggplot(filter(caminata_A, pasos > 1000), aes(x = theta)) +
geom_histogram(aes(y = ..density..),binwidth=1,alpha=.4)
hist_A
### b) histograma de la distribucion posterior para N(0,5)
hist_B <- ggplot(filter(caminata_B, pasos > 1000), aes(x = theta)) +
geom_histogram(aes(y = ..density..),binwidth=1,alpha=.04)
hist_B
### c) histograma de la distribucion posterior para N(0,20)
hist_C <- ggplot(filter(caminata_C, pasos > 1000), aes(x = theta)) +
geom_histogram(aes(y = ..density..),binwidth=1,alpha=.04)
hist_C
grid.arrange(hist_A, hist_B, hist_C, ncol = 3)
hist_A <- ggplot(filter(caminata_A, pasos > 1000), aes(x = theta)) +
geom_histogram(aes(y = ..density..),binwidth=1,alpha=.4)
hist_A
### b) histograma de la distribucion posterior para N(0,5)
hist_B <- ggplot(filter(caminata_B, pasos > 1000), aes(x = theta)) +
geom_histogram(aes(y = ..density..),binwidth=1,alpha=.4)
hist_B
### c) histograma de la distribucion posterior para N(0,20)
hist_C <- ggplot(filter(caminata_C, pasos > 1000), aes(x = theta)) +
geom_histogram(aes(y = ..density..),binwidth=1,alpha=.4)
hist_C
grid.arrange(hist_A, hist_B, hist_C, ncol = 3)
caminata_f <- filter(caminata_B, pasos > 1000)
sims_y <- rnorm(nrow(caminata_f), mean = mean(caminata_f$theta), sd=sqrt(5) )
mean(sims_y) # p(y = 1 | x) probabilidad predictiva
ggplot(as.data.frame(sims_y), aes(x = sims_y)) +
geom_histogram(aes(y = ..density..),binwidth=1) +
geom_vline(xintercept = c(mean(sims_y)),
color = c("red"))
head(sims_y)
ls_per_pred <- round(quantile(as.data.frame(sims_y), prob = 0.975), 2)
ls_per_pred <- round(quantile(as.data.frame(sims_y)$sims_y, prob = 0.975), 2)
ls_per_pred <- round(quantile(as.data.frame(sims_y)$sims_y, prob = 0.975), 2)
li_per_pred <- round(quantile(as.data.frame(sims_y)$sims_y, prob = 0.025), 2)
ls_per_pred
li_per_pred
ggplot(as.data.frame(sims_y), aes(x = sims_y)) +
geom_histogram(aes(y = ..density..),binwidth=1,alpha=.4) +
geom_vline(xintercept = c(mean(sims_y),li_per_pred,ls_per_pred),
color = c("red","blue","blue"))
traceplot(radon1.jags, varname = c("a", "b", "sigma.y"))
radon1.jags
grid.arrange(mu_rab_62, kappa_rab_62, ncol = 2)
mu_rab_62 <- ggplot(filter(sims_df, parametro == "mu"), aes(x = value)) +
geom_histogram(alpha = 0.8, binwidth=.003)+
xlab("Mu")
kappa_rab_62 <- ggplot(filter(sims_df, parametro == "kappa"), aes(x = value)) +
geom_histogram(alpha = 0.8, binwidth=4)+
xlab("kappa")
grid.arrange(mu_rab_62, kappa_rab_62, ncol = 2)
ggplot(subset(sims_df, parametro != "kappa" & parametro != "mu"), aes(x = parametro, y = value)) +
geom_boxplot()
ggplot(thetas_modelos, aes(x=mod1, y=mod2)) +
geom_point(alpha=.5) +
geom_abline(intercept = 0, colour="red")
save.image("~/Dropbox/ITAM/Decimo_semestre/Estadistica_computacional/Final/datos_final.RData")
